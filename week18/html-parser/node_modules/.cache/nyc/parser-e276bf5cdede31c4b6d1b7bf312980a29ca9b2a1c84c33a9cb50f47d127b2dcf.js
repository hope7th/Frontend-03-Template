"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paserHTML = paserHTML;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var css = require("css");

var layout = require("./4_1_layout.js");

var cunrrentToken = null;
var cunrrentAttribute = null;
var stack = [{
  type: "document",
  children: []
}];
var cunrrentTextNode = null;
var rules = [];

function specificity(selector) {
  var p = [0, 0, 0, 0];
  var selectorParts = selector.split(" ");

  var _iterator = _createForOfIteratorHelper(selectorParts),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var part = _step.value;

      if (part.charAt(0) == "#") {
        p[1] += 1;
      } else if (part.charAt(0) == ".") {
        p[2] += 1;
      } else {
        p[3] += 1;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return p;
}

function compare(sp1, sp2) {
  if (sp1[0] - sp2[0]) return sp1[0] - sp2[0];
  if (sp1[1] - sp2[1]) return sp1[1] - sp2[1];
  if (sp1[2] - sp2[2]) return sp1[2] - sp2[2];
  return sp1[3] - sp2[3];
}

function addCSSRules(text) {
  var ast = css.parse(text);
  console.log(JSON.stringify(ast, null, "  "));
  rules.push.apply(rules, _toConsumableArray(ast.stylesheet.rules));
}

function match(element, selector) {
  if (!selector || !element.attibutes) return false;

  if (selector.charAt(0) == "#") {
    var attr = element.attibutes.filter(function (attr) {
      return attr.name === "id";
    })[0];
    if (attr && attr.value === selector.replace("#", '')) return true;
  } else if (selector.charAt(0) == ".") {
    var attr = element.attibutes.filter(function (attr) {
      return attr.name === "class";
    })[0];
    if (attr && attr.value === selector.replace("#", '.')) return true;
  } else {
    if (element.tagName === selector) {
      return true;
    }
  }

  return false;
}

function computeCSS(element) {
  console.log(rules);
  console.log("comput CSS for Element", element);
  var element = stack.slice().reverse();
  if (!element.computedStyle) element.computedStyle = {};

  var _iterator2 = _createForOfIteratorHelper(rules),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var rule = _step2.value;
      var selectorParts = rule.selectors[0].splict(" ").reverse();
      if (!match(element.selectorParts[0])) continue;
      var matched = false;
      var j = 1;

      for (var i = 0; i < element.length; i++) {
        if (match(element[i], selectorParts[j])) {
          j++;
        }
      }

      ;
      if (j > selectorParts.length) matched = true;

      if (matched) {
        var sp = specificity(rule.selectors[0]);
        var computedStyle = element.computedStyle;

        var _iterator3 = _createForOfIteratorHelper(rule.declarations),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var declaration = _step3.value;
            if (!computedStyle[declaration.property]) computedStyle[declaration.property] = {};

            if (!computedStyle[declaration.property].specificity) {
              computedStyle[declaration.property].value = declaration.value;
              computedStyle[declaration.property].specificity = sp;
            } else if (compare(computedStyle[declaration.property].specificity, sp) < 0) {
              computedStyle[declaration.property].value = declaration.value;
              computedStyle[declaration.property].specificity = sp;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        console.log("Element", element, "matched rule", rule);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function emit(token) {
  console.log(token);
  var top = stack[stack.length - 1];

  if (token.type == "startTag") {
    var element = {
      type: "element",
      children: [],
      attibutes: []
    };
    element.tagName = token.tagName;

    for (var p in token) {
      if (p != token && p != "tagName") {
        element.attibutes.push({
          name: p,
          value: token[p]
        });
      }
    }

    computeCSS(element);
    top.children.push(element);
    element.parent = top;

    if (!token.isSelfClosing) {
      stack.push(element);
    }

    cunrrentTextNode = null;
  } else if (token.type == "endTag") {
    if (token.tagName != token.tagName) {
      throw new Error("Tag start end doesn't match");
    } else {
      if (top.tagName === "style") {
        addCSSRules(top.children[0].content);
      }

      layout(top);
      stack.pop();
    }

    cunrrentTextNode = null;
  } else if (token.type == "text") {
    if (cunrrentTextNode == null) {
      cunrrentTextNode = {
        type: "text",
        content: ""
      };
      top.children.push(cunrrentTextNode);
    }

    cunrrentTextNode.content += token.content;
  }
}

var EOF = Symbol("EOF");

function data(c) {
  if (c == "<") {
    return tagOpen;
  } else if (c == EOF) {
    emit({
      type: "EOF"
    });
    return;
  } else {
    emit({
      type: "text",
      content: c
    });
    return data;
  }
}

function tagOpen(c) {
  if (c == "/") {
    return endTagOpen;
  } else if (c.match(/^[a-zA-Z$]/)) {
    cunrrentToken = {
      type: "startTag",
      tagName: ""
    };
    return tagName(c);
  } else {
    return;
  }
}

function endTagOpen(c) {
  if (c.match(/^[a-zA-Z]¥/)) {
    cunrrentToken = {
      type: "endTag",
      tagName: ""
    };
    return tagName(c);
  } else if (c == ">") {} else if (c == EOF) {} else {}
}

function tagName(c) {
  if (c.match(/^[\t\n\g ]$/)) {
    return beforeAttributeName;
  } else if (c == "/") {
    return selfCloseingStartTag;
  } else if (c.match(/^[a-zA-Z]$/)) {
    cunrrentToken.tagName += c;
    return tagName;
  } else if (c == ">") {
    return data;
  } else {
    return tagName;
  }
}

function beforeAttributeName(c) {
  if (c.match(/^[\t\n\f ]$/)) {
    return beforeAttributeName;
  } else if (c == ">" || c == "/" || c == EOF) {
    return afterAttributeName(c);
  } else if (c == "=") {} else {
    cunrrentAttribute = {
      name: "",
      value: ""
    };
    return attributeName(c);
  }
}

function afterAttributeName(c) {
  if (c.match(/^[\t\n\f ]$/) || c == "/" || c == EOF) {
    return afterAttributeName(c);
  } else if (c == "=") {
    return beforeAttributeValue;
  } else if (c == "\0") {} else if (c == "\"" || C == "'" || c == "<") {} else {
    cunrrentAttribute.name += c;
    return attributeName;
  }
}

function beforeAttributeValue(c) {
  if (c.match(/^[\t\n\f ]$/) || c == "/" || c == EOF) {
    return beforeAttributeValue;
  } else if (c == "\"") {
    return doubleQuotedAttributeValue;
  } else if (c == "\'") {
    return singleQuotedAttributeValue;
  } else if (c == ">") {} else {
    return UnquotedAttributeValue(c);
  }
}

function doubleQuotedAttributeValue(c) {
  if (c == "\"") {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    return afterQuotedAttributeValue;
  } else if (c == "\0") {} else if (c == EOF) {} else {
    cunrrentAttribute.value += c;
    return doubleQuotedAttributeValue;
  }
}

function singleQuotedAttributeValue(c) {
  if (c == "\'") {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    return afterQuotedAttributeValue;
  } else if (c == "\0") {} else if (c == EOF) {} else {
    cunrrentAttribute.value += c; //    return singleQuotedAttributeValue 奇怪

    return doubleQuotedAttributeValue;
  }
}

function UnquotedAttributeValue(c) {
  if (c.match(/^[\t\n\f ]$/)) {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    return beforeAttributeName;
  } else if (c == "/") {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    return selfCloseingStartTag;
  } else if (c == ">") {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    emit(cunrrentToken);
    return data;
  } else if (c == "\0") {} else if (c == "\"" || C == "'" || c == "<" || c == "=" || c == "`") {} else if (c == EOF) {} else {
    cunrrentAttribute.name += c;
    return UnquotedAttributeValue;
  }
}

function afterQuotedAttributeValue(c) {
  if (c.match(/^[\t\n\f ]$/)) {
    return beforeAttributeName;
  } else if (c == "/") {
    return selfCloseingStartTag;
  } else if (c == ">") {
    cunrrentToken[cunrrentAttribute.name] = cunrrentAttribute.value;
    emit(cunrrentToken);
    return data;
  } else if (c == EOF) {} else {
    cunrrentAttribute.name += c;
    return doubleQuotedAttributeValue;
  }
}

function attributeName(c) {}

function selfCloseingStartTag(c) {
  if (c == ">") {
    cunrrentToken.isSelfClosing = true;
    return data;
  } else if (c == "EOF") {} else {}
}

function paserHTML(html) {
  console.log("------");
  console.log(html);
  var state = data;

  var _iterator4 = _createForOfIteratorHelper(html),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var c = _step4.value;
      state = state(c);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  state = state(EOF);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,